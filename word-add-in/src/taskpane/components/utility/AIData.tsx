/*
 * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
 * See LICENSE in the project root for license information.
 */

import axios, { AxiosRequestConfig } from "axios";
import { message } from "antd";

export const dropdownMenus = {
  title: [
    {
      desc: "Add a predefined title",
      key: "titlePredefined",
    },
    {
      type: "divider",
    },
    {
      desc: "Add a title generated by AI",
      key: "titleAI",
    },
  ],
  comment: [
    {
      desc: "Add a predefined comment",
      key: "commentPredefined",
    },
    {
      type: "divider",
    },
    {
      desc: "Add a comment generated by AI",
      key: "commentAI",
    },
  ],
  citation: [
    {
      desc: "Add a predefined citation",
      key: "citationPredefined",
    },
    {
      type: "divider",
    },
    {
      desc: "Add a citation generated by AI",
      key: "citationAI",
    },
  ],
};

export interface AzureTextGenAPI {
  prompt: string;
  max_tokens: number;
}

export interface AzureTextGenItem {
  text: string;
  finish_reason: string;
  logprobs: any;
}

export interface AzureTextGenRes {
  id: string;
  object: string;
  created: number;
  model: string;
  choices: AzureTextGenItem[];
  usage: {
    prompt_tokens: number;
    completion_tokens: number;
    total_tokens: number;
  };
}

export const generateText = async (
  apiKey: string,
  endpoint: string,
  deployment: string,
  content: string,
  maxTokens: number = 1000,
  provider: string = "openai"
) => {
  if (provider === "ollama") {
    // Ollama expects a different API
    const res = await axios.post(
      `${endpoint.replace(/\/$/, "")}/api/generate`,
      {
        model: deployment,
        prompt: content,
        stream: false,
      }
    );
    if (res.status === 200 && res.data) {
      return res.data.response || res.data.text || "";
    } else {
      throw Error(res.data.error || "Ollama error");
    }
  } else {
    // OpenAI-compatible API
    let requestBody = { prompt: content, max_tokens: maxTokens };
    let axiosConfig: AxiosRequestConfig = {
      headers: {
        Authorization: `Bearer ${apiKey}`,
        "Content-Type": "application/json",
      },
    };
    // Use the endpoint as provided by the user
    const res = await axios.post(endpoint, requestBody, axiosConfig);

    if (res.status === 200 && res.data) {
      // OpenAI API returns choices[0].text for completions
      const choices = res.data.choices;
      if (!choices || choices.length === 0) {
        message.error("No choices returned from the OpenAI service.");
        return "";
      }
      return choices[0].text?.replace(/\r?\n/g, "") || "";
    } else {
      throw Error(res.data.error || "OpenAI error");
    }
  }
};
